import fetch from 'node-fetch';

let handler = async (m, { conn, args, command, usedPrefix }) => {
  const query = args.join(" ");
  if (!query) {
    return m.reply(
      `╭─⬣「 *Spotify Downloader* 」⬣
│ ≡◦ 🎧 *Uso correcto:*
│ ≡◦ .${command} shakira loba
╰─⬣`
    );
  }

  try {
    const res = await fetch(`https://api.nekorinn.my.id/downloader/spotifyplay?q=${encodeURIComponent(query)}`);
    const json = await res.json();

    if (!json.status || !json.result?.downloadUrl) {
      return m.reply(
        `╭─⬣「 *Spotify Downloader* 」⬣
│ ≡◦ ❌ *No se encontró resultado para:* ${query}
╰─⬣`
      );
    }

    const { title, artist, duration, cover, url } = json.result.metadata;
    const audio = json.result.downloadUrl;

    // Enviar imagen con info
    await conn.sendMessage(m.chat, {
      image: { url: cover },
      caption: `╭─⬣「 *SPOTIFY* 」⬣
│ 🎵 *Título:* ${title}
│ 👤 *Artista:* ${artist}
│ ⏱️ *Duración:* ${duration}
│ 🌐 *Spotify:* ${url}
╰─⬣`
    }, { quoted: m });

    // Enviar audio
    await conn.sendMessage(m.chat, {
      audio: { url: audio },
      mimetype: 'audio/mp4',
      ptt: false,
      fileName: `${title}.mp3`
    }, { quoted: m });

  } catch (err) {
    console.error(err);
    return m.reply(
      `╭─⬣「 *Spotify Downloader* 」⬣
│ ⚠️ *Error al procesar la canción.*
│ ⏳ Intenta de nuevo más tarde.
╰─⬣`
    );
  }
};

handler.help = ['spotify <nombre o enlace>'];
handler.tags = ['descargas', 'musica'];
handler.command = /^spotify$/i;
handler.register = false;
handler.owner = false;
handler.group = false;
handler.premium = false;

export default handler;
